name: NEW Automatically open a docs-content tracking issue # todo
on:
  issues:
    types:
      - opened
      - reopened #todo

jobs:
  parse_release_issue:
    runs-on: ubuntu-latest

    outputs:
      output: ${{ steps.parse_issue.outputs.result }}

    steps:
      - name: Parse release issue
        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d
        id: parse_issue
        with:
          script: |
            const labels = context.payload.issue.labels

            let tier = 'unknown'
            for (const label of labels) {
              if (['Tier 1', 'Tier 2', 'Tier 3', 'Tier 4'].includes(label.name)) {
                tier = label.name
                break
              }
            }

            let phase = 'unknown'
            for (const label of labels) {
              if (['Alpha', 'Private Beta', 'Public Beta', 'Limited Public Beta', 'GA'].includes(label.name)) {
                phase = label.name
                break
              }
            }

            function getStringBetween(input, before, after) {
              // i = case insensitive, s = match newlines
              const re = new RegExp(before + '(.*?)' + after, 'is')
              const result = input.match(re)
              if (result) {
                return result[1].trim()
              } else {
                console.log(
                  `String between ${before} and ${after} was not found. Check if the release template changed.`
                )
                return result
              }
            }

            // Pull out info from the release issue body
            const body = context.payload.issue.body
            const shipDate = getStringBetween(body, 'Expected ship date', '###')
            const docsAnswer = getStringBetween(body, 'Will this feature require documentation\\?', '###')
            const openDocsIssue = (docsAnswer === 'TBD' || docsAnswer === 'Yes. Automatically create a docs issue for me')
            let releaseLabelToAdd
            switch (docsAnswer) {
              case 'TBD':
                releaseLabelToAdd = "docs - TBD"
                break;
              case 'No':
                releaseLabelToAdd = "docs - NA"
                break;
              default:
                releaseLabelToAdd = "docs"
            }
            const ghesApplicable =
              getStringBetween(
                body,
                'Will this feature, in its current release phase, flow into GitHub Enterprise Server\\?',
                '###'
              ) === 'Yes'
            const ghaeApplicable =
              getStringBetween(
                body,
                'Will this feature, in its current release phase, flow into GitHub AE\\?',
                '###'
              ) === 'Yes'

            const title = context.payload.issue.title
            const author = context.payload.issue.user.login
            const issue = context.payload.issue.html_url
            const newTitle = `[${shipDate}]: ${title} (${phase})`
            const newBody = `### Link to the release issue
            - ${issue}

            ${
              tier === 'Tier 3' || tier === 'Tier 4'
                ? `### If this release has a small docs impact, are you able to make the docs update yourself in the docs-internal repo?

            Please select one, @${author}:

            - [ ] Yes!
            - [ ] Yes, but with support
            - [ ] No, I'm not able
            - [ ] No, but I know someone who can (ping them in the next section)`
                : ''
            }

            ### Outstanding questions for the release DRI

            Please answer all questions, @${author}:
            ${
              tier === 'Tier 3' || tier === 'Tier 4'
                ? `- Do you think we'll need to create a new article to document this release? (If you're not sure, please say so.)
            - What existing documentation will likely need to be updated for this release and how should they be updated?`
                : ''
            } 
            - How would a docs team member access this feature for testing and screenshots?
            - What is the timeline for rolling to GHAE?
            - What is the relevant Slack channel?
            - Will any content require legal review?
              - [ ] Yes
              - [ ] No 
            - Will any content require security review?
              - [ ] Yes
              - [ ] No 
              ${
                tier === 'Tier 3' || tier === 'Tier 4'
                  ? `- If you answered that you can't open the PR but you know someone who can, ping them here. @${author}`
                  : ''
              }

            ${
              ghesApplicable
                ? `### Specific GHES version(s)

            Please select the first version that applies to this release, @${author}:
            - [ ] N/A
            - [ ] GHES 2.22
            - [ ] GHES 3.0
            - [ ] GHES 3.1
            - [ ] GHES 3.2
            - [ ] GHES 3.3 (future)
            - [ ] GHES 3.4 (future)`
                : ''
            }
            `

            return {
              newTitle: newTitle,
              openDocsIssue: openDocsIssue,
              releaseLabelToAdd: releaseLabelToAdd,
              newBody: newBody,
              ghaeApplicable: ghaeApplicable,
              tier: tier,
            }

  label_release_issue:
    runs-on: ubuntu-latest
    needs: parse_release_issue
    steps:
      - name: Label release issue with docs if applicable
        if: ${{ !fromJSON(needs.parse_release_issue.outputs.output).docsTBD }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RELEASE_ISSUE: ${{ github.event.issue.html_url }}
          LABEL: ${{ fromJSON(needs.parse_release_issue.outputs.output).releaseLabelToAdd }}
        run: |
          gh issue edit $RELEASE_ISSUE --add-label $LABEL

  open_docs_issue:
    runs-on: ubuntu-latest
    needs: parse_release_issue
    if: fromJSON(needs.parse_release_issue.outputs.output).openDocsIssue
    steps:
      - name: Create an issue in the docs-content repo # todo change repo name back and secrets back
        run: |
          new_issue_url="$(gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --repo ske-test-org/second-repo)"
          echo 'NEW_ISSUE='$new_issue_url >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          ISSUE_BODY: ${{ fromJSON(needs.parse_release_issue.outputs.output).newBody }}
          ISSUE_TITLE: ${{ fromJSON(needs.parse_release_issue.outputs.output).newTitle }}

      - name: Label docs content issue with GHAE if applicable
        if: fromJSON(needs.parse_release_issue.outputs.output).ghaeApplicable
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          NEW_ISSUE: ${{ env.NEW_ISSUE }}
        run: |
          gh issue edit $NEW_ISSUE --add-label "GHAE"

      - name: Label docs content issue with tier 3/4 label if applicable
        if: fromJSON(needs.parse_release_issue.outputs.output).tier=='Tier 3' || fromJSON(needs.parse_release_issue.outputs.output).tier=='Tier 4'
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          NEW_ISSUE: ${{ env.NEW_ISSUE }}
        run: |
          gh issue edit $NEW_ISSUE --add-label "Tier 3 or tier 4"

      - name: Label docs content issue with tier 1/2 label if applicable
        if: fromJSON(needs.parse_release_issue.outputs.output).tier=='Tier 1' || fromJSON(needs.parse_release_issue.outputs.output).tier=='Tier 2'
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          NEW_ISSUE: ${{ env.NEW_ISSUE }}
        run: |
          gh issue edit $NEW_ISSUE --add-label "Tier 1 or tier 2"

      - name: Label docs issue with docs TBD if applicable
        if: ${{ fromJSON(needs.parse_release_issue.outputs.output).releaseLabelToAdd == 'docs - TBD'}}
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          NEW_ISSUE: ${{ env.NEW_ISSUE }}
        run: |
          gh issue edit $NEW_ISSUE --add-label "docs - TBD"
