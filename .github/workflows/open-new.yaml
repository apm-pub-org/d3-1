name: Open docs issue

on:
  issues:
    types: [opened, reopened]

jobs:
  handle_docs:
    if: (!contains(github.event.issue.labels.*.name, 'Docs-NA'))
    runs-on: ubuntu-latest
    steps:
      - name: View context
        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d
        with:
          script: console.log(context)
          


      - name: Parse issue body
        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d
        id: parse-body
        with:
#           result-encoding: string
          script: |
            const body = context.payload.issue.body;

            function getStringBetween(input, before, after) {
              // i = case insensitive, s = match newlines
              re = new RegExp(before + "(.*?)" + after, "is");
              const result = input.match(re);

              if (result) {
                return result[1].trim();
              } else {
                console.log(
                  `String between ${before} and ${after} was not found. Check if the release template changed.`
                );
                return result;
              }
            }

            // Pull out info from the release issue
            const shipDate = getStringBetween(body, "Expected ship date", "###");
            const description = getStringBetween(
              body,
              "Short description of the project:",
              "###"
            );
            const docsNeeded = getStringBetween(body, "Are docs needed", "###");
            let docsBool = true
            if (docsNeeded === "No") {
              docsBool = false
            }

            const title = context.payload.issue.title;
            const author = context.payload.issue.user.login;
            const issue = context.payload.issue.html_url;

            const newBody = `
            ### Who is the DRI/PM and responsible team for this release?

            @${author}

            ### Release issue/tracking issue

            ${issue}

            ### Implementation pull requests



            ### What feature or product is shipping to GitHub customers?

            ${description}

            ### Who is the primary audience for this feature?



            ### Which GitHub products will include this feature?

            TODO

            ### If you selected "GitHub Enterprise Server" or "GitHub AE" in the product list above, what version or week?



            ### If you selected "Other" in the product list above, please describe.



            ### What existing articles do you think should be updated for your release? Link to any articles on docs.github.com and explain how they should be updated.



            ### Do you think we need a new article for your content?



            ### Are any new or updated API endpoints tied to this release?



            ### If you answered "Yes" or "TBD" above, provide details about the API updates or DRI for follow-up



            ### Relevant Slack channel



            ### Are you willing to open a PR to add this documentation? Do you know another Hubber that's willing to help write this documentation?



            ### Do you have any additional questions or concerns?

            `;

            const newTitle = `[${shipDate}]: ${title}`;

            return {
              body: newBody,
              title: newTitle,
              docsNeeded: docsBool
            };

      - name: Label release issue if no docs
        if: fromJSON(steps.parse-body.outputs.result).docsNeeded
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RELEASE_ISSUE: ${{ github.event.issue.html_url }}
        run: |
          gh issue edit $RELEASE_ISSUE --add-label "Docs-NA"

      - name: Open issue
        if: fromJSON(steps.parse-body.outputs.result).docsNeeded
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          BODY: ${{ fromJSON(steps.parse-body.outputs.result).body }}
          TITLE: ${{ fromJSON(steps.parse-body.outputs.result).title }}
        run: |
          docs_issue="$(gh issue create --title "$TITLE" --body "$BODY" --repo ske-test-org/second-repo)"
          echo 'DOCS_ISSUE='$docs_issue >> $GITHUB_ENV

      - name: Comment on new issue
        if: fromJSON(steps.parse-body.outputs.result).docsNeeded
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          RELEASE_ISSUE: ${{ github.event.issue.html_url }}
          AUTHOR: ${{ github.event.issue.user.login }}
        run: gh issue comment $DOCS_ISSUE --body "@$AUTHOR You opened $RELEASE_ISSUE, so I opened this corresponding docs issue for you." --repo ske-test-org/second-repo

