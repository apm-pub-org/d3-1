name: Automatically open a docs-content tracking issue
on:
  issues:
    types:
      - opened
jobs:
  auto_open_docs_issue:
    runs-on: ubuntu-latest

    steps:
      - name: Parse release issue
        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d
        id: parse_issue
        with:
          script: |
            const labels = context.payload.issue.labels;
            let tier = "unknown"
            for (const label of labels) {
              if (['Tier 1','Tier 2','Tier 3','Tier 4'].includes(label.name)){
                tier = label.name
                break
              }
            }
            let phase = "unknown"
            for (const label of labels) {
              if (['Alpha','Private Beta','Public Beta','Limited Public Beta', 'GA'].includes(label.name)){
                phase = label.name
                break
              }
            }
            const body = context.payload.issue.body;
            function getStringBetween(input, before, after) {
              // i = case insensitive, s = match newlines
              re = new RegExp(before + "(.*?)" + after, "is");
              const result = input.match(re);
              if (result) {
                return result[1].trim();
              } else {
                console.log(
                  `String between ${before} and ${after} was not found. Check if the release template changed.`
                );
                return result;
              }
            }
            // Pull out info from the release issue
            const shipDate = getStringBetween(body, "Expected ship date", "###");
            const docsNeeded = getStringBetween(body, "Are docs needed", "###");
            const ghesApplicable = getStringBetween(body, "Will this feature, in its current release phase, flow into GitHub Enterprise Server?", "###")==="Yes";
            const ghaeApplicable = getStringBetween(body, "Will this feature, in its current release phase, flow into GitHub AE?", "###")==="Yes";
            const title = context.payload.issue.title;
            const author = context.payload.issue.user.login;
            const issue = context.payload.issue.html_url;
            const newTitle = `[${shipDate}]: ${title} (${phase})`
            const newBody = `### Link to the release issue
            - ${issue}

            ### If this release has a small docs impact, are you able to make the docs update yourself in the docs-internal repo?

            Please select one, @${author}:

            - [ ] Yes!
            - [ ] Yes, but with support
            - [ ] No, I'm not able
            - [ ] No, but I know someone who can (ping them in the next section)

            ### Outstanding questions for the release DRI

            Please answer all questions, @${author}:
            - Do you think we'll need to create a new article to document this release? (If you're not sure, please say so.)
            - What existing documentation will likely need to be updated for this release and how should they be updated? 
            - How would a docs team member access this feature for testing and screenshots?
            - What is the timeline for rolling to GHAE?
            - What is the relevant Slack channel?
            - Will any content require legal review?
            - [ ] Yes
            - [ ] No 
            - Will any content require security review?
            - [ ] Yes
            - [ ] No 
            - If you answered that you can't open the PR but you know someone who can, ping them here. @${author}

            ${ghesApplicable ? `### Specific GHES version(s)

            Please select the first version that applies, @${author}:
            - [ ] GHES 2.22
            - [ ] GHES 3.0
            - [ ] GHES 3.1
            - [ ] GHES 3.2
            - [ ] GHES 3.3 (future)
            - [ ] GHES 3.4 (future)`:""}
            `

            return {
                newTitle: newTitle,
                docsNeeded: docsNeeded,
                newBody: newBody,
                ghaeApplicable: ghaeApplicable, 
              };

      - name: Create an issue in the docs-content repo
        run: |
          new_issue_url="$(gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --repo ske-test-org/second-repo)"
          echo 'NEW_ISSUE='$new_issue_url >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          ISSUE_BODY: ${{ fromJSON(steps.parse-body.outputs.result).newBody }}
          ISSUE_TITLE: ${{ fromJSON(steps.parse-body.outputs.result).newTitle }}

      - name: Label release issue GHAE
        if: fromJSON(steps.parse-body.outputs.result).ghaeApplicable
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
          NEW_ISSUE: ${{ env.NEW_ISSUE }}
        run: |
          gh issue edit $NEW_ISSUE --add-label "Docs-NA"

          
  # TODO:
  # - change repo where issue is created
  # - change PAT secret name
  # - store secret
  # - don't do anything if docs not needed
